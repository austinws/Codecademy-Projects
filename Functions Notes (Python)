BASIC FUNCTION EXAMPLE

def square(n):
  """Returns the square of a number."""
  squared = n ** 2
  print "%d squared is %d." % (n, squared)
  return squared
  
# Call the square function on line 10! Make sure to
# include the number 10 between the parentheses.

square(10)

SOMETHING I GOT RIGHT THE FIRST TIME SURPRISINGLY

def cube(number):
  return number ** 3

def by_three(number):
  if number%3==0:
    return cube(number)
  else:
    return False

IMPORTING LIBRARIES
#just imports the math library so python can print the square root of 25
import math
print math.sqrt(25)

#(from module import function) this is an easier way to do it if we just want to use sqrt and dont want to type math.sqrt
from math import sqrt
print sqrt(25)

ANOTHER THING I GOT RIGHT THE FIRST TIME

def shut_down(s):
  if s == "yes":
    return "Shutting down"
  elif s == "no":
    return "Shutdown aborted"
  else:
    return "Sorry"

TRIP COST CALCULATOR

def hotel_cost(nights):
  return 140* nights

def plane_ride_cost(city):
  if city == "Charlotte":
    return 183
  elif city == "Tampa":
    return 220
  elif city == "Pittsburgh":
    return 222
  elif city == "Los Angeles":
    return 475

def rental_car_cost (days):
  cost = 40 * days
  if days >= 7:
    cost -= 50
  elif days >= 3:
    cost -= 20
  return cost

def trip_cost (city, days, spending_money):
  return rental_car_cost(days) + hotel_cost(days - 1) + plane_ride_cost(city) + spending_money

print trip_cost("Los Angeles", 5, 600)

LIST PROBLEM I HAD TROUBLE WITH 

start_list = [5, 3, 1, 2, 4]
square_list = []

# Your code here!
for number in start_list:
  square_list.append(number**2)
square_list.sort()


print square_list

#I had trouble with this one because "number" wasn't defined at all in the instructions. I think codecademy could have done a better job explaining the problem with the example they gave. 


FINAL LIST PROBLEM THAT I GOT RIGHT THE FIRST TIME

inventory = {
  'gold' : 500,
  'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
  'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

inventory['pocket'] = ['seashell', 'strange berry', 'lint']

inventory['backpack'].sort()

inventory['backpack'].remove('dagger')

inventory['gold'] += 50

print inventory

MAKING A PURCHASE PROBLEM. IM JUST PUTTING MY CODE HERE TO SAVE BECAUSE IT IS TUMPING ME AND IM ABOUT TO REPLACE IT WITH THE SOLUTION I CANT EVEN SEE

shopping_list = ["banana", "orange", "apple"]

stock = {
  "banana": 6,
  "apple": 0,
  "orange": 32,
  "pear": 15
}
    
prices = {
  "banana": 4,
  "apple": 2,
  "orange": 1.5,
  "pear": 3
}

#MY CODE
def compute_bill(food):
  total = 0 
  for food in prices:
    total += prices[food]
  return total

#CORRECT CODE
def compute_bill(food):
  total = 0
  for item in food:
    total = total + prices[item]
  return total

#Next lesson code of mine            #Okay so mine was actually really damn close but I messed up the <= thing and didnt need the else statement
def compute_bill(food):
  total = 0
  for item in food:
    if stock[item] <= 0:
      total = total + prices[item]
      stock[item] -= 1
    else:
  return total

#Next lesson correct code
def compute_bill(food):
  total = 0
  for item in food:
    if stock[item] > 0:
      total += prices[item]
      stock[item] -= 1
  return total

